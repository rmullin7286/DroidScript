package me.rmullin.droidscript.core.interpreter

import me.rmullin.droidscript.core.types.*
import me.rmullin.droidscript.generated.DroidScriptBaseVisitor
import me.rmullin.droidscript.generated.DroidScriptLexer
import me.rmullin.droidscript.generated.DroidScriptParser
import org.antlr.v4.runtime.CharStream
import org.antlr.v4.runtime.CharStreams
import org.antlr.v4.runtime.CommonTokenStream
import java.io.File
import java.io.InputStream

/**
 * Parses a string and returns the AST that it represents
 */
fun read(chars: String) =
    readImpl(CharStreams.fromString(chars))

/**
 * Parses an InputStream and returns the AST that it represents
 */
fun read(inputStream: InputStream) =
    readImpl(
        CharStreams.fromStream(inputStream)
    )

/**
 * Parses the contents of a file and returns the AST that it represents
 */
fun read(file: File) =
    readImpl(CharStreams.fromStream(file.inputStream()))

private fun readImpl(charStream: CharStream) = charStream
    .let(::DroidScriptLexer)
    .let(::CommonTokenStream)
    .let(::DroidScriptParser)
    .let{ Visitor().visit(it.module())!!}

/**
 * This class is based on the visitor generated by Antlr.
 * None of the evaluation should actually be done in the visitor, only generating an AST
 */
private class Visitor : DroidScriptBaseVisitor<Any>() {
    private fun stripStringLiteral(s: String) = s
        .removeSurrounding("\"")
        .replace("\\n", "\n")
        .replace("\\t", "\t")
        .replace("\\\"", "\"")
        .replace("\\'", "\'")
        .replace("\\\\", "\\")
        .replace("\\r", "\r")

    override fun visitBoolFalse(ctx: DroidScriptParser.BoolFalseContext): DSBool = DSBool(false)
    override fun visitBoolTrue(ctx: DroidScriptParser.BoolTrueContext): DSBool = DSBool(true)
    override fun visitFloatLiteral(ctx: DroidScriptParser.FloatLiteralContext): DSNumber = DSNumber(ctx.text.toDouble())
    override fun visitIntLiteral(ctx: DroidScriptParser.IntLiteralContext): DSNumber = DSNumber(ctx.text.toInt())
    override fun visitStringLiteral(ctx: DroidScriptParser.StringLiteralContext): DSString = DSString(stripStringLiteral(ctx.text))
    override fun visitList(ctx: DroidScriptParser.ListContext): DSList? = ctx.values.map(::visit).toDSList()
    override fun visitSymbol(ctx: DroidScriptParser.SymbolContext): DSSymbol = DSSymbol(ctx.text)
    override fun visitModule(ctx: DroidScriptParser.ModuleContext): List<Any> = ctx.expressions.map(::visit)
}